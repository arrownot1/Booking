import streamlit as st
import pandas as pd
import json
import datetime
import hashlib
import uuid
from io import BytesIO

# --- ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile-First Design ---
def load_css():
    st.markdown("""
    <style>
    /* Mobile-first responsive design */
    .main-container {
        padding: 1rem;
        max-width: 100%;
    }
    
    /* Header styling */
    .app-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem 1rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .app-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .app-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
    }
    
    /* Card styling */
    .room-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border: 1px solid #e1e5e9;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .room-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .room-title {
        font-size: 1.3rem;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 0.8rem;
        display: flex;
        align-items: center;
    }
    
    .room-icon {
        margin-right: 0.5rem;
        font-size: 1.5rem;
    }
    
    .room-info {
        color: #7f8c8d;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }
    
    .room-description {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        font-size: 0.9rem;
        color: #495057;
        border-left: 4px solid #667eea;
    }
    
    /* Button styling */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.75rem 2rem;
        font-weight: bold;
        width: 100%;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }
    
    /* Status badges */
    .status-badge {
        display: inline-block;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
        margin: 0.2rem;
    }
    
    .status-pending {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }
    
    .status-approved {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    
    .status-rejected {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
    
    /* Form styling */
    .form-container {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        margin-bottom: 2rem;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
    }
    
    .css-1d391kg .css-1v0mbdj {
        color: white;
    }
    
    /* Mobile responsive adjustments */
    @media (max-width: 768px) {
        .app-title {
            font-size: 1.5rem;
        }
        
        .room-card {
            padding: 1rem;
        }
        
        .room-title {
            font-size: 1.1rem;
        }
        
        .form-container {
            padding: 1rem;
        }
    }
    
    /* Success/Error message styling */
    .stSuccess {
        border-radius: 10px;
        border-left: 4px solid #28a745;
    }
    
    .stError {
        border-radius: 10px;
        border-left: 4px solid #dc3545;
    }
    
    .stWarning {
        border-radius: 10px;
        border-left: 4px solid #ffc107;
    }
    
    .stInfo {
        border-radius: 10px;
        border-left: 4px solid #17a2b8;
    }
    
    /* Dataframe styling */
    .dataframe {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }
    
    /* Navigation improvements */
    .nav-section {
        background: white;
        border-radius: 15px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    </style>
    """, unsafe_allow_html=True)

# --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô) ---
ROOMS_DATA = {
    "Brain Stroming room": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1,
        "booking_advance_hours": 3,
        "min_users": 2,
        "max_users": 5,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 2 - 5 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "icon": "üß†"
    },
    "E-Sport room": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1,
        "booking_advance_hours": 3,
        "max_machines": 3,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 8 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
        "icon": "üéÆ"
    },
    "Pool Table": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1,
        "booking_advance_hours": 3,
        "min_users": 1,
        "max_users": 4,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 1 - 4 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "icon": "üé±"
    },
    "Music & Dance room": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1,
        "booking_advance_hours": 3,
        "min_users": 1,
        "max_users": 5,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 1 - 5 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "icon": "üéµ"
    },
    "Meeting C": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1,
        "booking_advance_days": 5,
        "min_users": 5,
        "max_users": 12,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 5 ‡∏ß‡∏±‡∏ô, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 5 - 12 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "icon": "üë•"
    },
    "Movie & Karaoke": {
        "open_time": "07:00",
        "close_time": "21:00",
        "duration_per_booking": 2,
        "booking_advance_hours": 3,
        "min_users": 1,
        "max_users": 7,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 1 - 7 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "icon": "üé¨"
    }
}

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
USERS_FILE = 'users.json'
BOOKINGS_FILE = 'bookings.json'

def load_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def load_bookings():
    try:
        with open(BOOKINGS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        return []

def save_bookings(bookings):
    with open(BOOKINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(bookings, f, indent=4, ensure_ascii=False)

def check_login_status():
    return st.session_state.get('logged_in', False)

def get_current_user_role():
    return st.session_state.get('user_role', 'guest')

def get_current_username():
    return st.session_state.get('username', None)

def get_status_badge(status):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML badge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
    status_map = {
        'pending': ('‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', 'status-pending'),
        'approved': ('‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', 'status-approved'),
        'rejected': ('‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò', 'status-rejected'),
        'cancelled_by_user': ('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß', 'status-rejected')
    }
    text, css_class = status_map.get(status, (status, 'status-pending'))
    return f'<span class="status-badge {css_class}">{text}</span>'

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (Landing Page) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def main_page():
    st.set_page_config(
        page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        page_icon="üè†",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    load_css()
    
    # Header
    st.markdown("""
    <div class="app-header">
        <div class="app-title">üè† ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</div>
        <div class="app-subtitle">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</div>
    </div>
    """, unsafe_allow_html=True)

    # Room cards
    for room_name, room_info in ROOMS_DATA.items():
        st.markdown(f"""
        <div class="room-card">
            <div class="room-title">
                <span class="room-icon">{room_info.get('icon', 'üè¢')}</span>
                {room_name}
            </div>
            <div class="room-info">
                <strong>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î:</strong> {room_info['open_time']} - {room_info['close_time']} ‡∏ô.
            </div>
            <div class="room-description">
                <strong>üìã ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:</strong> {room_info['description']}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button(f"üìÖ ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á {room_name}", key=f"book_{room_name}"):
            if check_login_status():
                users = load_users()
                current_user_data = users.get(get_current_username())
                if current_user_data and current_user_data.get('status') == 'approved':
                    st.session_state['current_page'] = 'booking_form'
                    st.session_state['selected_room'] = room_name
                    st.rerun()
                elif current_user_data and current_user_data.get('status') == 'pending':
                    st.warning("‚è≥ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
                elif current_user_data and current_user_data.get('status') == 'rejected':
                    st.error("‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                else:
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
                    st.session_state['logged_in'] = False
                    st.session_state['current_page'] = 'login'
                    st.rerun()
            else:
                st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
                st.session_state['current_page'] = 'login'
                st.rerun()
        
        st.markdown("<br>", unsafe_allow_html=True)

    # Sidebar navigation
    setup_sidebar()

def setup_sidebar():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sidebar navigation"""
    st.sidebar.markdown("""
    <div class="nav-section">
        <h3>üß≠ ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏≥‡∏ó‡∏≤‡∏á</h3>
    </div>
    """, unsafe_allow_html=True)
    
    if not check_login_status():
        if st.sidebar.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
            st.session_state['current_page'] = 'login'
            st.rerun()
        if st.sidebar.button("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
            st.session_state['current_page'] = 'register'
            st.rerun()
    else:
        current_username = get_current_username()
        users = load_users()
        user_data = users.get(current_username)

        if user_data:
            st.sidebar.markdown(f"""
            <div class="nav-section">
                <h4>üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ</h4>
                <p><strong>{user_data.get('full_name', current_username)}</strong></p>
                <p>{get_status_badge(user_data.get('status', 'pending'))}</p>
            </div>
            """, unsafe_allow_html=True)
            
            if user_data.get('status') == 'approved':
                if st.sidebar.button("üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"):
                    st.session_state['current_page'] = 'my_bookings'
                    st.rerun()
                if get_current_user_role() == 'admin':
                    st.sidebar.markdown("---")
                    st.sidebar.markdown("**üîß ‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö**")
                    if st.sidebar.button("üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
                        st.session_state['current_page'] = 'manage_users'
                        st.rerun()
                    if st.sidebar.button("üè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á"):
                        st.session_state['current_page'] = 'manage_rooms'
                        st.rerun()
                    if st.sidebar.button("üìä ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                        st.session_state['current_page'] = 'admin_manage_bookings'
                        st.rerun()

        st.sidebar.markdown("---")
        if st.sidebar.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
            for key in ['logged_in', 'username', 'user_role']:
                if key in st.session_state:
                    del st.session_state[key]
            st.session_state['current_page'] = 'main_page'
            st.success("‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def login_page():
    load_css()
    
    st.markdown("""
    <div class="app-header">
        <div class="app-title">üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</div>
        <div class="app-subtitle">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</div>
    </div>
    """, unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="form-container">', unsafe_allow_html=True)
        
        initial_username = st.session_state.get('remember_me_username', '')
        username_or_phone = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", value=initial_username)
        password = st.text_input("üîí ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        remember_me = st.checkbox("üíæ ‡∏à‡∏î‡∏à‡∏≥‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True):
                login_user(username_or_phone, password, remember_me)
        with col2:
            if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
                st.session_state['current_page'] = 'main_page'
                st.rerun()
        
        st.markdown("---")
        st.markdown("**‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?**")
        if st.button("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", use_container_width=True):
            st.session_state['current_page'] = 'register'
            st.rerun()
            
        st.markdown('</div>', unsafe_allow_html=True)

def login_user(username_or_phone, password, remember_me):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"""
    users = load_users()
    found_user = None

    if username_or_phone in users:
        found_user = users[username_or_phone]
    else:
        for user_key, user_data in users.items():
            if user_data.get('phone_number') == username_or_phone:
                found_user = user_data
                break

    if found_user and found_user['password'] == hash_password(password):
        st.session_state['logged_in'] = True
        st.session_state['username'] = found_user['username']
        st.session_state['user_role'] = found_user['role']

        if remember_me:
            st.session_state['remember_me_username'] = username_or_phone
        else:
            if 'remember_me_username' in st.session_state:
                del st.session_state['remember_me_username']

        if found_user.get('status') == 'approved':
            st.success(f"üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, {found_user.get('full_name', found_user['username'])}!")
            st.session_state['current_page'] = 'main_page'
            st.rerun()
        elif found_user.get('status') == 'pending':
            st.warning("‚è≥ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            st.session_state['logged_in'] = True
            st.session_state['current_page'] = 'main_page'
            st.rerun()
        elif found_user.get('status') == 'rejected':
            st.error("‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
            st.session_state['logged_in'] = False
            st.session_state['current_page'] = 'login'
            st.rerun()
    else:
        st.error("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def register_page():
    load_css()
    
    st.markdown("""
    <div class="app-header">
        <div class="app-title">üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà</div>
        <div class="app-subtitle">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</div>
    </div>
    """, unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="form-container">', unsafe_allow_html=True)
        
        new_username = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)")
        
        col1, col2 = st.columns(2)
        with col1:
            new_password = st.text_input("üîí ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        with col2:
            confirm_password = st.text_input("üîí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
        
        full_name = st.text_input("üìõ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
        
        col3, col4 = st.columns(2)
        with col3:
            room_number = st.text_input("üè† ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 54/999)")
        with col4:
            phone_number = st.text_input("üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡πÄ‡∏ä‡πà‡∏ô 08XXXXXXXX)")
        
        user_status_options = ["‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤", "‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á"]
        user_status = st.selectbox("üë• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", user_status_options)
        
        id_photo = st.file_uploader("üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô)", 
                                   type=["png", "jpg", "jpeg"])

        col5, col6 = st.columns(2)
        with col5:
            if st.button("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", use_container_width=True):
                register_user(new_username, new_password, confirm_password, full_name, 
                            room_number, phone_number, user_status, id_photo)
        with col6:
            if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
                st.session_state['current_page'] = 'main_page'
                st.rerun()

        st.markdown("---")
        st.markdown("**‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?**")
        if st.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True):
            st.session_state['current_page'] = 'login'
            st.rerun()
            
        st.markdown('</div>', unsafe_allow_html=True)

def register_user(new_username, new_password, confirm_password, full_name, 
                 room_number, phone_number, user_status, id_photo):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"""
    users = load_users()
    
    if not all([new_username, new_password, confirm_password, full_name, room_number, phone_number, id_photo]):
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        return
    
    if new_password != confirm_password:
        st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        return
    
    if new_username in users:
        st.error("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô")
        return
    
    if any(user_data.get('phone_number') == phone_number for user_data in users.values()):
        st.error("‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
        return

    users[new_username] = {
        'username': new_username,
        'password': hash_password(new_password),
        'full_name': full_name,
        'room_number': room_number,
        'phone_number': phone_number,
        'user_status': user_status,
        'id_photo_uploaded': True,
        'status': 'pending',
        'role': 'user'
    }
    save_users(users)
    st.success("üéâ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
    st.session_state['current_page'] = 'login'
    st.rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def booking_form_page():
    load_css()
    
    selected_room = st.session_state.get('selected_room', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
    room_info = ROOMS_DATA.get(selected_room, {})
    current_username = get_current_username()
    users = load_users()
    current_user_data = users.get(current_username, {})

    st.markdown(f"""
    <div class="app-header">
        <div class="app-title">{room_info.get('icon', 'üè¢')} ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á: {selected_room}</div>
        <div class="app-subtitle">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</div>
    </div>
    """, unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="form-container">', unsafe_allow_html=True)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
        st.markdown(f"""
        <div class="room-description">
            <strong>üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á:</strong> {room_info.get('description', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}
        </div>
        """, unsafe_allow_html=True)

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
        st.subheader("üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á")
        col1, col2 = st.columns(2)
        with col1:
            user_full_name = st.text_input("üìõ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", 
                                         value=current_user_data.get('full_name', ''), 
                                         disabled=True)
            user_room_number = st.text_input("üè† ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà", 
                                           value=current_user_data.get('room_number', ''), 
                                           disabled=True)
        with col2:
            user_phone_number = st.text_input("üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", 
                                            value=current_user_data.get('phone_number', ''), 
                                            disabled=True)

        st.markdown("---")
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        st.subheader("üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
        col3, col4 = st.columns(2)
        
        with col3:
            booking_date = st.date_input("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á", 
                                       min_value=datetime.date.today())
        
        with col4:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
            available_time_slots = calculate_available_slots(selected_room, booking_date, room_info)
            
            if not available_time_slots:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                booking_time = st.selectbox("‚è∞ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", 
                                          ["- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á -"], 
                                          disabled=True)
            else:
                booking_time = st.selectbox("‚è∞ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", available_time_slots)

        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        if selected_room == "E-Sport room":
            num_users_or_machines = st.number_input(
                f"üéÆ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {room_info.get('max_machines', 0)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)",
                min_value=1,
                max_value=room_info.get('max_machines', 0),
                value=1,
                step=1
            )
        else:
            min_users = room_info.get('min_users', 1)
            max_users = room_info.get('max_users', 1)
            num_users_or_machines = st.number_input(
                f"üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {min_users} ‡∏Ñ‡∏ô, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_users} ‡∏Ñ‡∏ô)",
                min_value=min_users,
                max_value=max_users,
                value=min_users,
                step=1
            )

        st.markdown("---")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        col5, col6 = st.columns(2)
        with col5:
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", use_container_width=True):
                process_booking(selected_room, booking_date, booking_time, 
                              num_users_or_machines, current_user_data, room_info)
        with col6:
            if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
                st.session_state['current_page'] = 'main_page'
                st.rerun()
                
        st.markdown('</div>', unsafe_allow_html=True)

def calculate_available_slots(selected_room, booking_date, room_info):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    open_time_str = room_info.get('open_time')
    close_time_str = room_info.get('close_time')
    duration_hours = room_info.get('duration_per_booking')
    
    available_time_slots = []
    
    if open_time_str and close_time_str and duration_hours:
        open_time = datetime.datetime.strptime(open_time_str, "%H:%M").time()
        close_time = datetime.datetime.strptime(close_time_str, "%H:%M").time()
        
        current_time_slot_start = datetime.datetime.combine(booking_date, open_time)
        
        while current_time_slot_start.time() < close_time:
            current_time_slot_end = current_time_slot_start + datetime.timedelta(hours=duration_hours)
            
            if current_time_slot_end.date() > booking_date or current_time_slot_end.time() > close_time:
                break
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            is_slot_available = True
            bookings = load_bookings()
            
            for booking in bookings:
                existing_booking_start_dt = datetime.datetime.strptime(
                    f"{booking['booking_date']} {booking['start_time']}", "%Y-%m-%d %H:%M")
                existing_booking_end_dt = datetime.datetime.strptime(
                    f"{booking['booking_date']} {booking['end_time']}", "%Y-%m-%d %H:%M")
                
                time_overlap = (current_time_slot_start < existing_booking_end_dt) and \
                              (current_time_slot_end > existing_booking_start_dt)
                
                if time_overlap and booking['status'] in ['pending', 'approved'] and \
                   booking['room_name'] == selected_room:
                    is_slot_available = False
                    break
            
            if is_slot_available:
                available_time_slots.append(
                    f"{current_time_slot_start.strftime('%H:%M')} - {current_time_slot_end.strftime('%H:%M')}")
            
            current_time_slot_start = current_time_slot_start + datetime.timedelta(hours=duration_hours)
    
    return available_time_slots

def process_booking(selected_room, booking_date, booking_time, num_users_or_machines, 
                   current_user_data, room_info):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    if not booking_date or not booking_time or booking_time == "- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á -":
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á")
        return

    start_time_str = booking_time.split(' - ')[0]
    end_time_str = booking_time.split(' - ')[1]
    booking_datetime_start = datetime.datetime.combine(
        booking_date, datetime.datetime.strptime(start_time_str, "%H:%M").time())
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
    current_datetime = datetime.datetime.now()
    if booking_datetime_start < current_datetime:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
    if not check_advance_booking(booking_datetime_start, current_datetime, room_info, selected_room):
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    if not check_booking_conflicts(booking_datetime_start, booking_time, selected_room, 
                                 current_user_data.get('room_number')):
        return
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    if not validate_user_count(selected_room, num_users_or_machines, room_info):
        return
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    create_new_booking(selected_room, booking_date, start_time_str, end_time_str,
                      num_users_or_machines, current_user_data)

def check_advance_booking(booking_datetime_start, current_datetime, room_info, selected_room):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤"""
    if "booking_advance_days" in room_info:
        required_advance_date = current_datetime + datetime.timedelta(days=room_info["booking_advance_days"])
        if booking_datetime_start < required_advance_date:
            st.error(f"‚ùå ‡∏´‡πâ‡∏≠‡∏á {selected_room} ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {room_info['booking_advance_days']} ‡∏ß‡∏±‡∏ô")
            return False
    elif "booking_advance_hours" in room_info:
        required_advance_time = current_datetime + datetime.timedelta(hours=room_info["booking_advance_hours"])
        if booking_datetime_start < required_advance_time:
            st.error(f"‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {room_info['booking_advance_hours']} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
            return False
    return True

def check_booking_conflicts(booking_datetime_start, booking_time, selected_room, user_room_number):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    start_time_str = booking_time.split(' - ')[0]
    end_time_str = booking_time.split(' - ')[1]
    booking_datetime_end = datetime.datetime.combine(
        booking_datetime_start.date(), 
        datetime.datetime.strptime(end_time_str, "%H:%M").time())
    
    bookings = load_bookings()
    
    for booking in bookings:
        existing_booking_start_dt = datetime.datetime.strptime(
            f"{booking['booking_date']} {booking['start_time']}", "%Y-%m-%d %H:%M")
        existing_booking_end_dt = datetime.datetime.strptime(
            f"{booking['booking_date']} {booking['end_time']}", "%Y-%m-%d %H:%M")
        
        time_overlap = (booking_datetime_start < existing_booking_end_dt) and \
                      (booking_datetime_end > existing_booking_start_dt)
        
        if time_overlap and booking['status'] in ['pending', 'approved']:
            if booking['room_name'] == selected_room:
                st.error(f"‚ùå ‡∏´‡πâ‡∏≠‡∏á {selected_room} ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                return False
            
            if booking['user_room_number'] == user_room_number:
                st.error(f"‚ùå ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà {user_room_number} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                return False
    
    return True

def validate_user_count(selected_room, num_users_or_machines, room_info):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
    if selected_room == "E-Sport room":
        if not (1 <= num_users_or_machines <= room_info.get('max_machines', 0)):
            st.error(f"‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {room_info.get('max_machines', 0)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
            return False
    else:
        min_users = room_info.get('min_users', 0)
        max_users = room_info.get('max_users', 0)
        if not (min_users <= num_users_or_machines <= max_users):
            st.error(f"‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {min_users} ‡∏ñ‡∏∂‡∏á {max_users} ‡∏Ñ‡∏ô")
            return False
    return True

def create_new_booking(selected_room, booking_date, start_time_str, end_time_str,
                      num_users_or_machines, current_user_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"""
    new_booking = {
        "booking_id": str(uuid.uuid4()),
        "username": get_current_username(),
        "room_name": selected_room,
        "booking_date": booking_date.strftime("%Y-%m-%d"),
        "start_time": start_time_str,
        "end_time": end_time_str,
        "num_users_or_machines": num_users_or_machines,
        "user_full_name": current_user_data.get('full_name', ''),
        "user_room_number": current_user_data.get('room_number', ''),
        "user_phone_number": current_user_data.get('phone_number', ''),
        "status": "pending",
        "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    bookings = load_bookings()
    bookings.append(new_booking)
    save_bookings(bookings)
    
    st.success("üéâ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
    st.session_state['current_page'] = 'my_bookings'
    st.rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def my_bookings_page():
    load_css()
    
    st.markdown("""
    <div class="app-header">
        <div class="app-title">üìã ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</div>
        <div class="app-subtitle">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
    </div>
    """, unsafe_allow_html=True)

    current_username = get_current_username()
    users = load_users()
    current_user_data = users.get(current_username, {})

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    with st.container():
        st.markdown('<div class="form-container">', unsafe_allow_html=True)
        st.subheader("üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {current_user_data.get('username')}")
            st.write(f"**üìõ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:** {current_user_data.get('full_name')}")
            st.write(f"**üè† ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:** {current_user_data.get('room_number')}")
        with col2:
            st.write(f"**üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:** {current_user_data.get('phone_number')}")
            st.write(f"**üë• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {current_user_data.get('user_status')}")
            st.markdown(f"**üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:** {get_status_badge(current_user_data.get('status'))}", 
                       unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)

    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    st.subheader("üìÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
    bookings = load_bookings()
    user_bookings = [b for b in bookings if b['username'] == current_username]

    if user_bookings:
        display_user_bookings(user_bookings)
        display_cancellation_section(user_bookings)
    else:
        st.info("‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")

    # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
    if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
        st.session_state['current_page'] = 'main_page'
        st.rerun()

def display_user_bookings(user_bookings):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    df = pd.DataFrame(user_bookings)
    df['datetime_sort'] = pd.to_datetime(df['booking_date'] + ' ' + df['start_time'])
    df = df.sort_values(by='datetime_sort', ascending=False)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ HTML
    df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML'] = df['status'].apply(get_status_badge)
    
    df_display = df[[
        'room_name', 'booking_date', 'start_time', 'end_time',
        'num_users_or_machines', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML', 'timestamp'
    ]].rename(columns={
        'room_name': 'üè¢ ‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
        'booking_date': 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
        'start_time': '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
        'end_time': '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
        'num_users_or_machines': 'üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML': 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
        'timestamp': 'üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
    })
    
    st.dataframe(df_display, use_container_width=True, hide_index=True)

def display_cancellation_section(user_bookings):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    st.markdown("---")
    st.subheader("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
    
    cancellable_bookings = [
        b for b in user_bookings
        if b['status'] == 'pending' and
           (datetime.datetime.strptime(f"{b['booking_date']} {b['start_time']}", "%Y-%m-%d %H:%M") > 
            datetime.datetime.now())
    ]

    if cancellable_bookings:
        booking_options = {
            f"üè¢ {b['room_name']} - üìÖ {b['booking_date']} ‚è∞ {b['start_time']}" : b['booking_id']
            for b in cancellable_bookings
        }
        
        selected_booking_display = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á)",
            list(booking_options.keys())
        )
        
        if st.button("‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", use_container_width=True):
            selected_booking_id = booking_options.get(selected_booking_display)
            cancel_booking(selected_booking_id)
    else:
        st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")

def cancel_booking(booking_id):
    """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    bookings = load_bookings()
    
    for i, booking in enumerate(bookings):
        if booking['booking_id'] == booking_id and booking['status'] == 'pending':
            bookings[i]['status'] = 'cancelled_by_user'
            save_bookings(bookings)
            st.success("‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
            st.rerun()
            return
    
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def admin_manage_bookings_page():
    load_css()
    
    st.markdown("""
    <div class="app-header">
        <div class="app-title">üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
        <div class="app-subtitle">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</div>
    </div>
    """, unsafe_allow_html=True)

    bookings = load_bookings()

    if not bookings:
        st.info("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
            st.session_state['current_page'] = 'main_page'
            st.rerun()
        return

    # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    display_booking_filters_and_data(bookings)
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    display_booking_management_section(bookings)
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    display_export_section(bookings)

    if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
        st.session_state['current_page'] = 'main_page'
        st.rerun()

def display_booking_filters_and_data(bookings):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    df = pd.DataFrame(bookings)
    
    st.subheader("üîç ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    col_filter, col_sort = st.columns(2)
    
    with col_filter:
        status_filter = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "pending", "approved", "rejected", "cancelled_by_user"],
            key="admin_booking_status_filter"
        )
    
    with col_sort:
        sort_options = {
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)": ("booking_date", "start_time", False),
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î)": ("booking_date", "start_time", True),
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": ("status", None, True)
        }
        sort_by_display = st.selectbox(
            "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°",
            list(sort_options.keys()),
            key="admin_booking_sort"
        )

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    filtered_df = df.copy()
    if status_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df['status'] == status_filter]

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    sort_col1, sort_col2, sort_asc = sort_options[sort_by_display]
    if sort_col1 == "booking_date":
        filtered_df['sort_key'] = pd.to_datetime(filtered_df['booking_date'] + ' ' + filtered_df['start_time'])
        filtered_df = filtered_df.sort_values(by='sort_key', ascending=sort_asc).drop(columns=['sort_key'])
    else:
        filtered_df = filtered_df.sort_values(by=sort_col1, ascending=sort_asc)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ HTML
    filtered_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML'] = filtered_df['status'].apply(get_status_badge)
    
    display_columns = [
        'booking_id', 'username', 'room_name', 'booking_date', 'start_time', 'end_time',
        'num_users_or_machines', 'user_full_name', 'user_room_number', 'user_phone_number',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML', 'timestamp'
    ]
    
    column_names = {
        'booking_id': 'üÜî ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
        'username': 'üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        'room_name': 'üè¢ ‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
        'booking_date': 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
        'start_time': '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°',
        'end_time': '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
        'num_users_or_machines': 'üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        'user_full_name': 'üìõ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
        'user_room_number': 'üè† ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
        'user_phone_number': 'üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML': 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
        'timestamp': 'üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
    }
    
    df_display = filtered_df[display_columns].rename(columns=column_names)
    st.dataframe(df_display, use_container_width=True, hide_index=True)

def display_booking_management_section(bookings):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    st.markdown("---")
    st.subheader("‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
    
    booking_ids = [b['booking_id'] for b in bookings]
    
    if booking_ids:
        col1, col2 = st.columns(2)
        
        with col1:
            selected_booking_id = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
                booking_ids,
                key="select_booking_to_manage"
            )
        
        with col2:
            new_status = st.selectbox(
                "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô",
                ["pending", "approved", "rejected", "cancelled_by_user"],
                key="new_booking_status"
            )
        
        col3, col4 = st.columns(2)
        
        with col3:
            if st.button("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", use_container_width=True):
                update_booking_status(selected_booking_id, new_status)
        
        with col4:
            if st.button("üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", use_container_width=True):
                delete_booking(selected_booking_id)
    else:
        st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")

def update_booking_status(booking_id, new_status):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    bookings = load_bookings()
    
    for i, booking in enumerate(bookings):
        if booking['booking_id'] == booking_id:
            bookings[i]['status'] = new_status
            save_bookings(bookings)
            st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á {booking_id[:8]}... ‡πÄ‡∏õ‡πá‡∏ô '{new_status}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            st.rerun()
            return
    
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

def delete_booking(booking_id):
    """‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    bookings = load_bookings()
    original_len = len(bookings)
    bookings = [b for b in bookings if b['booking_id'] != booking_id]
    
    if len(bookings) < original_len:
        save_bookings(bookings)
        st.success(f"‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á {booking_id[:8]}... ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        st.rerun()
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

def display_export_section(bookings):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    st.markdown("---")
    st.subheader("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    if bookings:
        df_export = pd.DataFrame(bookings)
        df_export_final = df_export[[
            'booking_id', 'username', 'room_name', 'booking_date', 'start_time', 'end_time',
            'num_users_or_machines', 'user_full_name', 'user_room_number', 'user_phone_number',
            'status', 'timestamp'
        ]].rename(columns={
            'booking_id': '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
            'username': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            'room_name': '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
            'booking_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
            'start_time': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°',
            'end_time': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
            'num_users_or_machines': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
            'user_full_name': '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
            'user_room_number': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
            'user_phone_number': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
            'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
            'timestamp': '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
        })
        
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df_export_final.to_excel(writer, sheet_name='Bookings', index=False)
        output.seek(0)

        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel",
            data=output,
            file_name=f"booking_data_{datetime.date.today().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    else:
        st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def manage_users_page():
    load_css()
    
    st.markdown("""
    <div class="app-header">
        <div class="app-title">üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>
        <div class="app-subtitle">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</div>
    </div>
    """, unsafe_allow_html=True)

    users = load_users()
    
    if not users:
        st.info("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
            st.session_state['current_page'] = 'main_page'
            st.rerun()
        return

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    display_users_list(users)
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    display_user_management_section(users)
    
    # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    display_users_export_section(users)

    if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
        st.session_state['current_page'] = 'main_page'
        st.rerun()

def display_users_list(users):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    users_list = list(users.values())
    df_users = pd.DataFrame(users_list)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ HTML
    df_users['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML'] = df_users['status'].apply(get_status_badge)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
    df_users['‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó_HTML'] = df_users['role'].apply(lambda x: 'üëë ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' if x == 'admin' else 'üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
    
    df_display_users = df_users[[
        'username', 'full_name', 'room_number', 'phone_number',
        'user_status', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML', '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó_HTML'
    ]].rename(columns={
        'username': 'üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        'full_name': 'üìõ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
        'room_number': 'üè† ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà',
        'phone_number': 'üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        'user_status': 'üë• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞_HTML': 'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó_HTML': 'üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'
    })
    
    st.dataframe(df_display_users, use_container_width=True, hide_index=True)

def display_user_management_section(users):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    st.markdown("---")
    st.subheader("‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    user_names = list(users.keys())
    
    if user_names:
        with st.container():
            st.markdown('<div class="form-container">', unsafe_allow_html=True)
            
            selected_user = st.selectbox(
                "üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
                user_names,
                key="select_user_to_manage"
            )

            current_user_info = users.get(selected_user, {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                new_status = st.selectbox(
                    "üìä ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
                    ["pending", "approved", "rejected"],
                    index=["pending", "approved", "rejected"].index(current_user_info.get('status', 'pending')),
                    key=f"status_for_{selected_user}"
                )
            
            with col2:
                new_role = st.selectbox(
                    "üé≠ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó",
                    ["user", "admin"],
                    index=["user", "admin"].index(current_user_info.get('role', 'user')),
                    key=f"role_for_{selected_user}"
                )

            col3, col4 = st.columns(2)
            
            with col3:
                if st.button("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó", use_container_width=True):
                    update_user_status_and_role(selected_user, new_status, new_role)
            
            with col4:
                if st.button("üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", use_container_width=True):
                    delete_user(selected_user)
            
            st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")

def update_user_status_and_role(username, new_status, new_role):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    users = load_users()
    
    if username in users:
        users[username]['status'] = new_status
        users[username]['role'] = new_role
        save_users(users)
        st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á '{username}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: '{new_status}', ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: '{new_role}'")
        st.rerun()
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

def delete_user(username):
    """‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    if username == get_current_username():
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ")
        return
    
    users = load_users()
    
    if username in users:
        del users[username]
        save_users(users)
        st.success(f"‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ '{username}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        st.rerun()
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

def display_users_export_section(users):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    st.markdown("---")
    st.subheader("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    
    if users:
        users_list = list(users.values())
        df_export_users = pd.DataFrame(users_list)
        
        df_export_users_final = df_export_users[[
            'username', 'full_name', 'room_number', 'phone_number',
            'user_status', 'status', 'role'
        ]].rename(columns={
            'username': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            'full_name': '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
            'room_number': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà',
            'phone_number': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
            'user_status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
            'role': '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'
        })
        
        output_users = BytesIO()
        with pd.ExcelWriter(output_users, engine='xlsxwriter') as writer:
            df_export_users_final.to_excel(writer, sheet_name='Users', index=False)
        output_users.seek(0)

        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Excel",
            data=output_users,
            file_name=f"user_data_{datetime.date.today().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    else:
        st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ---
def manage_rooms_page():
    load_css()
    
    st.markdown("""
    <div class="app-header">
        <div class="app-title">üè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á</div>
        <div class="app-subtitle">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</div>
    </div>
    """, unsafe_allow_html=True)
    
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö cards
    for room_name, room_info in ROOMS_DATA.items():
        st.markdown(f"""
        <div class="room-card">
            <div class="room-title">
                <span class="room-icon">{room_info.get('icon', 'üè¢')}</span>
                {room_name}
            </div>
            <div class="room-info">
                <strong>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î:</strong> {room_info['open_time']} - {room_info['close_time']} ‡∏ô.
            </div>
            <div class="room-info">
                <strong>‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:</strong> {room_info['duration_per_booking']} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            </div>
            <div class="room-info">
                <strong>üìÖ ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤:</strong> 
                {room_info.get('booking_advance_days', room_info.get('booking_advance_hours', 0))} 
                {'‡∏ß‡∏±‡∏ô' if 'booking_advance_days' in room_info else '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'}
            </div>
            <div class="room-info">
                <strong>üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</strong> 
                {f"{room_info.get('min_users', 1)}-{room_info.get('max_users', 1)} ‡∏Ñ‡∏ô" if 'min_users' in room_info else f"‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {room_info.get('max_machines', 0)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"}
            </div>
            <div class="room-description">
                <strong>üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong> {room_info['description']}
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
    rooms_data = []
    for room_name, room_info in ROOMS_DATA.items():
        room_data = {
            '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°': f"{room_info.get('icon', 'üè¢')} {room_name}",
            '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î': room_info['open_time'],
            '‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î': room_info['close_time'],
            '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏ä‡∏°.)': room_info['duration_per_booking'],
            '‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤': f"{room_info.get('booking_advance_days', room_info.get('booking_advance_hours', 0))} {'‡∏ß‡∏±‡∏ô' if 'booking_advance_days' in room_info else '‡∏ä‡∏°.'}",
            '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á': f"{room_info.get('min_users', 1)}-{room_info.get('max_users', room_info.get('max_machines', 1))}"
        }
        rooms_data.append(room_data)
    
    rooms_df = pd.DataFrame(rooms_data)
    st.dataframe(rooms_df, use_container_width=True, hide_index=True)
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.markdown("---")
    st.subheader("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á")
    
    output_rooms = BytesIO()
    with pd.ExcelWriter(output_rooms, engine='xlsxwriter') as writer:
        rooms_df.to_excel(writer, sheet_name='Rooms', index=False)
    output_rooms.seek(0)

    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel",
        data=output_rooms,
        file_name=f"rooms_data_{datetime.date.today().strftime('%Y%m%d')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        use_container_width=True
    )
    
    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    st.info("‚ÑπÔ∏è **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    
    if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", use_container_width=True):
        st.session_state['current_page'] = 'main_page'
        st.rerun()

# --- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à‡∏´‡∏•‡∏±‡∏Å ---
def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤"""
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if 'current_page' not in st.session_state:
        st.session_state['current_page'] = 'main_page'
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_page = st.session_state['current_page']
    
    # ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    if current_page == 'main_page':
        main_page()
    elif current_page == 'login':
        login_page()
    elif current_page == 'register':
        register_page()
    elif current_page == 'booking_form':
        booking_form_page()
    elif current_page == 'my_bookings':
        my_bookings_page()
    elif current_page == 'manage_users':
        manage_users_page()
    elif current_page == 'manage_rooms':
        manage_rooms_page()
    elif current_page == 'admin_manage_bookings':
        admin_manage_bookings_page()
    else:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        st.session_state['current_page'] = 'main_page'
        st.rerun()

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile Optimization ---
def add_mobile_meta_tags():
    """‡πÄ‡∏û‡∏¥‡πà‡∏° meta tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mobile optimization"""
    st.markdown("""
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="theme-color" content="#667eea">
    """, unsafe_allow_html=True)

def add_pwa_manifest():
    """‡πÄ‡∏û‡∏¥‡πà‡∏° PWA manifest ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô app"""
    st.markdown("""
    <script>
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', function() {
            navigator.serviceWorker.register('/sw.js');
        });
    }
    </script>
    """, unsafe_allow_html=True)

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
def show_notification(message, type="info"):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö toast"""
    icons = {
        "success": "‚úÖ",
        "error": "‚ùå", 
        "warning": "‚ö†Ô∏è",
        "info": "‚ÑπÔ∏è"
    }
    
    icon = icons.get(type, "‚ÑπÔ∏è")
    
    st.markdown(f"""
    <div class="notification notification-{type}">
        <span class="notification-icon">{icon}</span>
        <span class="notification-message">{message}</span>
    </div>
    """, unsafe_allow_html=True)

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notifications ---
def add_notification_css():
    """‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
    st.markdown("""
    <style>
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        z-index: 1000;
        display: flex;
        align-items: center;
        min-width: 300px;
        animation: slideIn 0.3s ease-out;
    }
    
    .notification-icon {
        margin-right: 0.5rem;
        font-size: 1.2rem;
    }
    
    .notification-message {
        flex: 1;
        font-weight: 500;
    }
    
    .notification-success {
        border-left: 4px solid #28a745;
    }
    
    .notification-error {
        border-left: 4px solid #dc3545;
    }
    
    .notification-warning {
        border-left: 4px solid #ffc107;
    }
    
    .notification-info {
        border-left: 4px solid #17a2b8;
    }
    
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @media (max-width: 768px) {
        .notification {
            right: 10px;
            left: 10px;
            min-width: auto;
        }
    }
    </style>
    """, unsafe_allow_html=True)

# --- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ---
if __name__ == "__main__":
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° mobile optimization
    add_mobile_meta_tags()
    add_notification_css()
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
    main()


