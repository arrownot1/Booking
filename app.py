import streamlit as st
import pandas as pd
import json
import datetime
import hashlib
import uuid
from io import BytesIO

# --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
ROOMS_DATA = {
    "Brain Stroming room": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1, # hours
        "booking_advance_hours": 3,
        "min_users": 2,
        "max_users": 5,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 2 - 5 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    },
    "E-Sport room": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1, # hours
        "booking_advance_hours": 3,
        "max_machines": 3, # ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 8 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 8 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"
    },
    "Pool Table": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1, # hours
        "booking_advance_hours": 3,
        "min_users": 1,
        "max_users": 4,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 1 - 4 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    },
    "Music & Dance room": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1, # hours
        "booking_advance_hours": 3,
        "min_users": 1,
        "max_users": 5,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 1 - 5 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    },
    "Meeting C": {
        "open_time": "06:00",
        "close_time": "21:00",
        "duration_per_booking": 1, # hours
        "booking_advance_days": 5, # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô
        "min_users": 5,
        "max_users": 12,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 5 ‡∏ß‡∏±‡∏ô, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 5 - 12 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    },
    "Movie & Karaoke": {
        "open_time": "07:00",
        "close_time": "21:00",
        "duration_per_booking": 2, # hours
        "booking_advance_hours": 3,
        "min_users": 1,
        "max_users": 7,
        "description": "‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ 1 - 7 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    }
}

# --- ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
USERS_FILE = 'users.json'
BOOKINGS_FILE = 'bookings.json'

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def load_users():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

def save_users(users):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON"""
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def hash_password(password):
    """‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ SHA256"""
    return hashlib.sha256(password.encode()).hexdigest()

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def load_bookings():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        with open(BOOKINGS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        return []

def save_bookings(bookings):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON"""
    with open(BOOKINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(bookings, f, indent=4, ensure_ascii=False)

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def check_login_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    return st.session_state.get('logged_in', False)

def get_current_user_role():
    """‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    return st.session_state.get('user_role', 'guest')

def get_current_username():
    """‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    return st.session_state.get('username', None)

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (Landing Page) (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def main_page():
    st.set_page_config(
        page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        page_icon="üè†",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.title("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
    st.write("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")

    st.header("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
    cols = st.columns(2)

    for i, (room_name, room_info) in enumerate(ROOMS_DATA.items()):
        with cols[i % 2]:
            st.subheader(room_name)
            st.write(f"**‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î:** {room_info['open_time']} - {room_info['close_time']} ‡∏ô.")
            st.write(f"**‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:** {room_info['description']}")

            if st.button(f"‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á {room_name}", key=f"book_{room_name}"):
                if check_login_status():
                    users = load_users()
                    current_user_data = users.get(get_current_username())
                    if current_user_data and current_user_data.get('status') == 'approved':
                        st.session_state['current_page'] = 'booking_form'
                        st.session_state['selected_room'] = room_name
                        st.experimental_rerun()
                    elif current_user_data and current_user_data.get('status') == 'pending':
                        st.warning("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
                    elif current_user_data and current_user_data.get('status') == 'rejected':
                        st.error("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                    else:
                        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
                        st.session_state['logged_in'] = False
                        st.session_state['current_page'] = 'login'
                        st.experimental_rerun()
                else:
                    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
                    st.session_state['current_page'] = 'login'
                    st.experimental_rerun()

    st.markdown("---")
    st.sidebar.title("‡∏ô‡∏≥‡∏ó‡∏≤‡∏á")
    if not check_login_status():
        if st.sidebar.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
            st.session_state['current_page'] = 'login'
            st.experimental_rerun()
        if st.sidebar.button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
            st.session_state['current_page'] = 'register'
            st.experimental_rerun()
    else:
        current_username = get_current_username()
        users = load_users()
        user_data = users.get(current_username)

        if user_data:
            st.sidebar.write(f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user_data.get('full_name', current_username)}")
            if user_data.get('status') == 'approved':
                if st.sidebar.button("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"):
                    st.session_state['current_page'] = 'my_bookings'
                    st.experimental_rerun()
                if get_current_user_role() == 'admin':
                    if st.sidebar.button("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
                        st.session_state['current_page'] = 'manage_users'
                        st.experimental_rerun()
                    if st.sidebar.button("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á"):
                        st.session_state['current_page'] = 'manage_rooms'
                        st.experimental_rerun()
                    if st.sidebar.button("‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                        st.session_state['current_page'] = 'admin_manage_bookings'
                        st.experimental_rerun()
            elif user_data.get('status') == 'pending':
                st.sidebar.info("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
            elif user_data.get('status') == 'rejected':
                st.sidebar.error("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò")

        if st.sidebar.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
            del st.session_state['logged_in']
            if 'username' in st.session_state:
                del st.session_state['username']
            if 'user_role' in st.session_state:
                del st.session_state['user_role']
            st.session_state['current_page'] = 'main_page'
            st.info("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.experimental_rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def login_page():
    st.title("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

    initial_username = st.session_state.get('remember_me_username', '')

    username_or_phone = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", value=initial_username)
    password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")

    remember_me = st.checkbox("‡∏à‡∏î‡∏à‡∏≥‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        users = load_users()
        found_user = None

        if username_or_phone in users:
            found_user = users[username_or_phone]
        else:
            for user_key, user_data in users.items():
                if user_data.get('phone_number') == username_or_phone:
                    found_user = user_data
                    break

        if found_user and found_user['password'] == hash_password(password):
            st.session_state['logged_in'] = True
            st.session_state['username'] = found_user['username']
            st.session_state['user_role'] = found_user['role']

            if remember_me:
                st.session_state['remember_me_username'] = username_or_phone
            else:
                if 'remember_me_username' in st.session_state:
                    del st.session_state['remember_me_username']

            if found_user.get('status') == 'approved':
                st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, {found_user.get('full_name', found_user['username'])}!")
                st.session_state['current_page'] = 'main_page'
                st.experimental_rerun()
            elif found_user.get('status') == 'pending':
                st.warning("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
                st.session_state['logged_in'] = True
                st.session_state['current_page'] = 'main_page'
                st.experimental_rerun()
            elif found_user.get('status') == 'rejected':
                st.error("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                st.session_state['logged_in'] = False
                st.session_state['current_page'] = 'login'
                st.experimental_rerun()
        else:
            st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    st.markdown("---")
    st.write("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?")
    if st.button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
        st.session_state['current_page'] = 'register'
        st.experimental_rerun()
    if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", key="back_from_login"):
        st.session_state['current_page'] = 'main_page'
        st.experimental_rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def register_page():
    st.title("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà")

    st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:")
    new_username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)")
    new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
    room_number = st.text_input("‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 54/999)")
    phone_number = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡πÄ‡∏ä‡πà‡∏ô 08XXXXXXXX)")
    user_status_options = ["‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤", "‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á"]
    user_status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", user_status_options)
    id_photo = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô)", type=["png", "jpg", "jpeg"])

    if st.button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
        users = load_users()
        if not new_username or not new_password or not confirm_password or not full_name or not room_number or not phone_number or not id_photo:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
            return
        if new_password != confirm_password:
            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            return
        if new_username in users:
            st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô")
            return
        if any(user_data.get('phone_number') == phone_number for user_data in users.values()):
            st.error("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
            return

        users[new_username] = {
            'username': new_username,
            'password': hash_password(new_password),
            'full_name': full_name,
            'room_number': room_number,
            'phone_number': phone_number,
            'user_status': user_status,
            'id_photo_uploaded': True, # Placeholder
            'status': 'pending',
            'role': 'user'
        }
        save_users(users)
        st.success("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
        st.session_state['current_page'] = 'login'
        st.experimental_rerun()

    st.markdown("---")
    st.write("‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", key="login_from_register"):
        st.session_state['current_page'] = 'login'
        st.experimental_rerun()
    if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", key="back_from_register"):
        st.session_state['current_page'] = 'main_page'
        st.experimental_rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def booking_form_page():
    selected_room = st.session_state.get('selected_room', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
    room_info = ROOMS_DATA.get(selected_room, {})
    current_username = get_current_username()
    users = load_users()
    current_user_data = users.get(current_username, {})

    st.title(f"‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á: {selected_room}")
    st.write(f"**‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á:** {room_info.get('description', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}")

    user_full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", value=current_user_data.get('full_name', ''), disabled=True)
    user_room_number = st.text_input("‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà", value=current_user_data.get('room_number', ''), disabled=True)
    user_phone_number = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", value=current_user_data.get('phone_number', ''), disabled=True)

    col1, col2 = st.columns(2)
    with col1:
        booking_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á", min_value=datetime.date.today())
    with col2:
        open_time_str = room_info.get('open_time')
        close_time_str = room_info.get('close_time')
        duration_hours = room_info.get('duration_per_booking')

        available_time_slots = []
        if open_time_str and close_time_str and duration_hours:
            open_time = datetime.datetime.strptime(open_time_str, "%H:%M").time()
            close_time = datetime.datetime.strptime(close_time_str, "%H:%M").time()

            current_datetime_for_check_advance = datetime.datetime.now()

            current_time_slot_start = datetime.datetime.combine(booking_date, open_time)

            while current_time_slot_start.time() < close_time or (current_time_slot_start.time() == open_time and current_time_slot_start.time() == close_time):
                current_time_slot_end = current_time_slot_start + datetime.timedelta(hours=duration_hours)

                if current_time_slot_end.date() > booking_date or current_time_slot_end.time() > close_time:
                    break

                is_slot_available = True
                bookings = load_bookings()
                for booking in bookings:
                    existing_booking_start_dt = datetime.datetime.strptime(f"{booking['booking_date']} {booking['start_time']}", "%Y-%m-%d %H:%M")
                    existing_booking_end_dt = datetime.datetime.strptime(f"{booking['booking_date']} {booking['end_time']}", "%Y-%m-%d %H:%M")

                    time_overlap = (current_time_slot_start < existing_booking_end_dt) and \
                                   (current_time_slot_end > existing_booking_start_dt)

                    if time_overlap and booking['status'] in ['pending', 'approved']:
                        if booking['room_name'] == selected_room:
                            is_slot_available = False
                            break

                if is_slot_available:
                    available_time_slots.append(f"{current_time_slot_start.strftime('%H:%M')} - {current_time_slot_end.strftime('%H:%M')}")
                current_time_slot_start = current_time_slot_start + datetime.timedelta(hours=duration_hours)

        if not available_time_slots:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            booking_time = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á -"], disabled=True)
        else:
            booking_time = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", available_time_slots)

    if selected_room == "E-Sport room":
        num_users_or_machines = st.number_input(
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {room_info.get('max_machines', 0)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)",
            min_value=1,
            max_value=room_info.get('max_machines', 0),
            value=1,
            step=1
        )
    else:
        min_users = room_info.get('min_users', 1)
        max_users = room_info.get('max_users', 1)
        num_users_or_machines = st.number_input(
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {min_users} ‡∏Ñ‡∏ô, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_users} ‡∏Ñ‡∏ô)",
            min_value=min_users,
            max_value=max_users,
            value=min_users,
            step=1
        )

    if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"):
        if not booking_date or not booking_time or booking_time == "- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á -" or not num_users_or_machines:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á")
            return

        start_time_str = booking_time.split(' - ')[0]
        end_time_str = booking_time.split(' - ')[1]
        booking_datetime_start = datetime.datetime.combine(booking_date, datetime.datetime.strptime(start_time_str, "%H:%M").time())
        booking_datetime_end = datetime.datetime.combine(booking_date, datetime.datetime.strptime(end_time_str, "%H:%M").time())

        current_datetime_for_check_advance = datetime.datetime.now()
        if booking_datetime_start < current_datetime_for_check_advance:
             st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ")
             return

        is_advance_ok = True
        if "booking_advance_days" in room_info:
            required_advance_date = current_datetime_for_check_advance + datetime.timedelta(days=room_info["booking_advance_days"])
            if booking_datetime_start < required_advance_date:
                st.error(f"‡∏´‡πâ‡∏≠‡∏á {selected_room} ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {room_info['booking_advance_days']} ‡∏ß‡∏±‡∏ô (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ {current_datetime_for_check_advance.strftime('%Y-%m-%d %H:%M')})")
                is_advance_ok = False
        elif "booking_advance_hours" in room_info:
            required_advance_time = current_datetime_for_check_advance + datetime.timedelta(hours=room_info["booking_advance_hours"])
            if booking_datetime_start < required_advance_time:
                st.error(f"‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {room_info['booking_advance_hours']} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ {current_datetime_for_check_advance.strftime('%Y-%m-%d %H:%M')})")
                is_advance_ok = False
        if not is_advance_ok:
            return

        bookings = load_bookings()
        is_room_available = True
        is_same_house_booking_conflict = False

        for booking in bookings:
            existing_booking_start_dt = datetime.datetime.strptime(f"{booking['booking_date']} {booking['start_time']}", "%Y-%m-%d %H:%M")
            existing_booking_end_dt = datetime.datetime.strptime(f"{booking['booking_date']} {booking['end_time']}", "%Y-%m-%d %H:%M")

            time_overlap = (booking_datetime_start < existing_booking_end_dt) and \
                           (booking_datetime_end > existing_booking_start_dt)

            if time_overlap and booking['status'] in ['pending', 'approved']:
                if booking['room_name'] == selected_room:
                    is_room_available = False
                    break

                if booking['user_room_number'] == user_room_number:
                    is_same_house_booking_conflict = True
                    break

        if not is_room_available:
            st.error(f"‡∏´‡πâ‡∏≠‡∏á {selected_room} ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô")
            return

        if is_same_house_booking_conflict:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà {user_room_number} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return

        if selected_room == "E-Sport room":
            if not (1 <= num_users_or_machines <= room_info.get('max_machines', 0)):
                st.error(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {room_info.get('max_machines', 0)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
                return
        else:
            if not (room_info.get('min_users', 0) <= num_users_or_machines <= room_info.get('max_users', 0)):
                st.error(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {room_info.get('min_users', 0)} ‡∏ñ‡∏∂‡∏á {room_info.get('max_users', 0)} ‡∏Ñ‡∏ô")
                return

        new_booking = {
            "booking_id": str(uuid.uuid4()),
            "username": current_username,
            "room_name": selected_room,
            "booking_date": booking_date.strftime("%Y-%m-%d"),
            "start_time": start_time_str,
            "end_time": end_time_str,
            "num_users_or_machines": num_users_or_machines,
            "user_full_name": user_full_name,
            "user_room_number": user_room_number,
            "user_phone_number": user_phone_number,
            "status": "pending",
            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        bookings.append(new_booking)
        save_bookings(bookings)
        st.success("‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
        st.session_state['current_page'] = 'my_bookings'
        st.experimental_rerun()

    st.markdown("---")
    if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", key="back_from_booking"):
        st.session_state['current_page'] = 'main_page'
        st.experimental_rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ) (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def my_bookings_page():
    st.title("‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô")
    current_username = get_current_username()
    users = load_users()
    current_user_data = users.get(current_username, {})

    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.write(f"**‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {current_user_data.get('username')}")
    st.write(f"**‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:** {current_user_data.get('full_name')}")
    st.write(f"**‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:** {current_user_data.get('room_number')}")
    st.write(f"**‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:** {current_user_data.get('phone_number')}")
    st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {current_user_data.get('user_status')}")
    st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:** {current_user_data.get('status').capitalize()}")

    st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô")
    bookings = load_bookings()
    user_bookings = [b for b in bookings if b['username'] == current_username]

    if user_bookings:
        df = pd.DataFrame(user_bookings)
        df['datetime_sort'] = pd.to_datetime(df['booking_date'] + ' ' + df['start_time'])
        df = df.sort_values(by='datetime_sort', ascending=False)
        df = df.drop(columns=['datetime_sort'])

        df_display = df[[
            'room_name', 'booking_date', 'start_time', 'end_time',
            'num_users_or_machines', 'status', 'timestamp', 'booking_id'
        ]].rename(columns={
            'room_name': '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
            'booking_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
            'start_time': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
            'end_time': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
            'num_users_or_machines': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
            'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
            'timestamp': '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
        })
        st.dataframe(df_display, use_container_width=True, hide_index=True)

        st.markdown("---")
        st.subheader("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
        cancellable_bookings = [
            b for b in user_bookings
            if b['status'] == 'pending' and
               (datetime.datetime.strptime(f"{b['booking_date']} {b['start_time']}", "%Y-%m-%d %H:%M") > datetime.datetime.now())
        ]

        if cancellable_bookings:
            booking_ids_to_cancel = {
                f"{b['booking_id'][:8]}... - {b['room_name']} ({b['booking_date']} {b['start_time']})" : b['booking_id']
                for b in cancellable_bookings
            }
            selected_booking_display = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á)",
                list(booking_ids_to_cancel.keys())
            )
            selected_booking_id = booking_ids_to_cancel.get(selected_booking_display)

            if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"):
                bookings_to_update = load_bookings()
                found_and_canceled = False
                for i, booking in enumerate(bookings_to_update):
                    if booking['booking_id'] == selected_booking_id:
                        if booking['status'] == 'pending':
                            bookings_to_update[i]['status'] = 'cancelled_by_user'
                            save_bookings(bookings_to_update)
                            st.success("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                            found_and_canceled = True
                            st.experimental_rerun()
                        else:
                            st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '{booking['status']}'")
                        break
                if not found_and_canceled:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ")
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")

    else:
        st.info("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")

    st.markdown("---")
    if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
        st.session_state['current_page'] = 'main_page'
        st.experimental_rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö) (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def admin_manage_bookings_page():
    st.title("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)")

    bookings = load_bookings()
    users = load_users()

    if not bookings:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
            st.session_state['current_page'] = 'main_page'
            st.experimental_rerun()
        return

    df = pd.DataFrame(bookings)
    df['Full Booking Info'] = df.apply(lambda row: f"{row['room_name']} on {row['booking_date']} from {row['start_time']} to {row['end_time']} by {row['username']} (Room: {row['user_room_number']})", axis=1)

    st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    col_filter, col_sort = st.columns(2)
    with col_filter:
        status_filter = st.selectbox(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "pending", "approved", "rejected", "cancelled_by_user"],
            key="admin_booking_status_filter"
        )
    with col_sort:
        sort_by_options = {
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)": ("booking_date", "start_time", False),
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î)": ("booking_date", "start_time", True),
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": ("status", None, True)
        }
        sort_by_display = st.selectbox(
            "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°",
            list(sort_by_options.keys()),
            key="admin_booking_sort"
        )
        sort_col1, sort_col2, sort_asc = sort_by_options[sort_by_display]

    filtered_df = df.copy()
    if status_filter != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df['status'] == status_filter]

    if sort_col1 == "booking_date":
        filtered_df['sort_key'] = pd.to_datetime(filtered_df['booking_date'] + ' ' + filtered_df['start_time'])
        filtered_df = filtered_df.sort_values(by='sort_key', ascending=sort_asc).drop(columns=['sort_key'])
    else:
        filtered_df = filtered_df.sort_values(by=sort_col1, ascending=sort_asc)


    st.dataframe(filtered_df[[
        'booking_id', 'username', 'room_name', 'booking_date', 'start_time', 'end_time',
        'num_users_or_machines', 'user_full_name', 'user_room_number', 'user_phone_number',
        'status', 'timestamp'
    ]].rename(columns={
        'booking_id': '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
        'username': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        'room_name': '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
        'booking_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
        'start_time': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°',
        'end_time': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
        'num_users_or_machines': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        'user_full_name': '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
        'user_room_number': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
        'user_phone_number': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
        'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
        'timestamp': '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
    }), use_container_width=True, hide_index=True)


    st.markdown("---")
    st.subheader("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
    booking_ids = [b['booking_id'] for b in filtered_df.to_dict('records')]
    if booking_ids:
        selected_booking_id = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
            booking_ids,
            key="select_booking_to_manage"
        )
        new_status = st.selectbox(
            "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô",
            ["pending", "approved", "rejected", "cancelled_by_user"],
            key="new_booking_status"
        )
        if st.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"):
            bookings_to_update = load_bookings()
            for i, booking in enumerate(bookings_to_update):
                if booking['booking_id'] == selected_booking_id:
                    bookings_to_update[i]['status'] = new_status
                    save_bookings(bookings_to_update)
                    st.success(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á {selected_booking_id} ‡πÄ‡∏õ‡πá‡∏ô '{new_status}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    st.experimental_rerun()
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")

    st.markdown("---")
    st.subheader("‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")
    if booking_ids:
        booking_id_to_delete = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
            booking_ids,
            key="select_booking_to_delete"
        )
        if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"):
            bookings_to_update = load_bookings()
            original_len = len(bookings_to_update)
            bookings_to_update = [b for b in bookings_to_update if b['booking_id'] != booking_id_to_delete]
            if len(bookings_to_update) < original_len:
                save_bookings(bookings_to_update)
                st.success(f"‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á {booking_id_to_delete} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.experimental_rerun()
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏ö")

    st.markdown("---")
    st.subheader("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if bookings:
        df_export = pd.DataFrame(bookings)
        df_export_final = df_export[[
            'booking_id', 'username', 'room_name', 'booking_date', 'start_time', 'end_time',
            'num_users_or_machines', 'user_full_name', 'user_room_number', 'user_phone_number',
            'status', 'timestamp'
        ]].rename(columns={
            'booking_id': '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
            'username': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            'room_name': '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
            'booking_date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á',
            'start_time': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°',
            'end_time': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
            'num_users_or_machines': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
            'user_full_name': '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
            'user_room_number': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
            'user_phone_number': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á',
            'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
            'timestamp': '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
        })
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df_export_final.to_excel(writer, sheet_name='Bookings', index=False)
        output.seek(0)

        st.download_button(
            label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel",
            data=output,
            file_name="booking_data.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")

    st.markdown("---")
    if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", key="back_from_admin_bookings"):
        st.session_state['current_page'] = 'main_page'
        st.experimental_rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô) (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á) ---
def manage_users_page():
    st.title("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)")

    users = load_users()
    if not users:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
            st.session_state['current_page'] = 'main_page'
            st.experimental_rerun()
        return

    # ‡πÅ‡∏õ‡∏•‡∏á Dictionary ‡∏Ç‡∏≠‡∏á users ‡πÄ‡∏õ‡πá‡∏ô List ‡∏Ç‡∏≠‡∏á Dictionary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    users_list = list(users.values())
    df_users = pd.DataFrame(users_list)

    st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    df_display_users = df_users[[
        'username', 'full_name', 'room_number', 'phone_number',
        'user_status', 'status', 'role'
    ]].rename(columns={
        'username': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        'full_name': '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
        'room_number': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà',
        'phone_number': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        'user_status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        'role': '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'
    })
    st.dataframe(df_display_users, use_container_width=True, hide_index=True)

    st.markdown("---")
    st.subheader("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    user_names = list(users.keys())
    if user_names:
        selected_user = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
            user_names,
            key="select_user_to_manage"
        )

        current_user_info = users.get(selected_user, {})
        col_status, col_role = st.columns(2)

        with col_status:
            new_status = st.selectbox(
                "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
                ["pending", "approved", "rejected"],
                index=["pending", "approved", "rejected"].index(current_user_info.get('status', 'pending')),
                key=f"status_for_{selected_user}"
            )
        with col_role:
            new_role = st.selectbox(
                "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó",
                ["user", "admin"],
                index=["user", "admin"].index(current_user_info.get('role', 'user')),
                key=f"role_for_{selected_user}"
            )

        if st.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
            users_to_update = load_users()
            if selected_user in users_to_update:
                users_to_update[selected_user]['status'] = new_status
                users_to_update[selected_user]['role'] = new_role
                save_users(users_to_update)
                st.success(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á '{selected_user}' ‡πÄ‡∏õ‡πá‡∏ô ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: '{new_status}', ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: '{new_role}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.experimental_rerun()
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")

    st.markdown("---")
    st.subheader("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    if user_names:
        user_to_delete = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
            user_names,
            key="select_user_to_delete"
        )
        if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
            if user_to_delete == get_current_username():
                st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ")
            else:
                users_to_update = load_users()
                if user_to_delete in users_to_update:
                    del users_to_update[user_to_delete]
                    save_users(users_to_update)
                    st.success(f"‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ '{user_to_delete}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    st.experimental_rerun()
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏•‡∏ö")

    st.markdown("---")
    st.subheader("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if users:
        df_export_users = pd.DataFrame(users_list)
        df_export_users_final = df_export_users[[
            'username', 'full_name', 'room_number', 'phone_number',
            'user_status', 'status', 'role'
        ]].rename(columns={
            'username': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            'full_name': '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
            'room_number': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà',
            'phone_number': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
            'user_status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            'status': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
            'role': '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'
        })
        output_users = BytesIO()
        with pd.ExcelWriter(output_users, engine='xlsxwriter') as writer:
            df_export_users_final.to_excel(writer, sheet_name='Users', index=False)
        output_users.seek(0)

        st.download_button(
            label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Excel",
            data=output_users,
            file_name="user_data.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")


    st.markdown("---")
    if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", key="back_from_manage_users"):
        st.session_state['current_page'] = 'main_page'
        st.experimental_rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô) (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
def manage_rooms_page():
    st.title("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)")
    st.write("‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á - ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
    rooms_df = pd.DataFrame.from_dict(ROOMS_DATA, orient='index')
    st.dataframe(rooms_df, use_container_width=True)
    st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏£‡∏≤‡∏ö: ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    if st.button("‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
        st.session_state['current_page'] = 'main_page'
        st.experimental_rerun()

# --- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
if 'current_page' not in st.session_state:
    st.session_state['current_page'] = 'main_page'

if st.session_state['current_page'] == 'main_page':
    main_page()
elif st.session_state['current_page'] == 'login':
    login_page()
elif st.session_state['current_page'] == 'register':
    register_page()
elif st.session_state['current_page'] == 'booking_form':
    booking_form_page()
elif st.session_state['current_page'] == 'my_bookings':
    my_bookings_page()
elif st.session_state['current_page'] == 'manage_users':
    manage_users_page()
elif st.session_state['current_page'] == 'manage_rooms':
    manage_rooms_page()
elif st.session_state['current_page'] == 'admin_manage_bookings':
    admin_manage_bookings_page()
