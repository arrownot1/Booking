                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {user['username']}")
                    st.write(f"**‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:** {user['full_name']}")
                    st.write(f"**‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:** {user['room_number']}")
                    st.write(f"**‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:** {user['phone']}")
                
                with col2:
                    st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {user['status']}")
                    st.write(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:** {user['approval_status']}")
                    st.write(f"**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£:** {user['created_at']}")
                    
                    if user['profile_image']:
                        try:
                            image_data = base64.b64decode(user['profile_image'])
                            image = Image.open(io.BytesIO(image_data))
                            st.image(image, caption="‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", width=100)
                        except:
                            st.write("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
                
                with col3:
                    new_approval = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", 
                                               ["pending", "approved", "rejected"],
                                               index=["pending", "approved", "rejected"].index(user['approval_status']),
                                               key=f"approval_{user['id']}")
                    
                    if st.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", key=f"update_user_{user['id']}"):
                        conn = sqlite3.connect('room_booking.db')
                        c = conn.cursor()
                        c.execute("UPDATE users SET approval_status = ? WHERE id = ?", (new_approval, user['id']))
                        conn.commit()
                        conn.close()
                        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        st.rerun()
                    
                    if st.button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", key=f"delete_user_{user['id']}"):
                        conn = sqlite3.connect('room_booking.db')
                        c = conn.cursor()
                        c.execute("DELETE FROM users WHERE id = ?", (user['id'],))
                        c.execute("DELETE FROM bookings WHERE user_id = ?", (user['id'],))
                        conn.commit()
                        conn.close()
                        st.success("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        st.rerun()
    
    with tab3:
        st.subheader("üè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"):
            with st.form("add_room_form"):
                col1, col2 = st.columns(2)
                
                with col1:
                    room_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á")
                    open_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î", value=time(6, 0))
                    close_time = st.time_input("‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î", value=time(21, 0))
                
                with col2:
                    max_duration = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)", min_value=1, value=1)
                    advance_hours = st.number_input("‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)", min_value=1, value=3)
                    min_people = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", min_value=1, value=1)
                    max_people = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", min_value=1, value=5)
                
                special_conditions = st.text_area("‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©")
                
                if st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á"):
                    if room_name:
                        conn = sqlite3.connect('room_booking.db')
                        c = conn.cursor()
                        c.execute("""INSERT INTO rooms (name, open_time, close_time, max_duration, 
                                    advance_booking_hours, min_people, max_people, special_conditions)
                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                                 (room_name, open_time.strftime("%H:%M"), close_time.strftime("%H:%M"),
                                  max_duration, advance_hours, min_people, max_people, special_conditions))
                        conn.commit()
                        conn.close()
                        st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        st.rerun()
                    else:
                        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        conn = sqlite3.connect('room_booking.db')
        rooms_df = pd.read_sql_query("SELECT * FROM rooms", conn)
        conn.close()
        
        for _, room in rooms_df.iterrows():
            with st.expander(f"üè¢ {room['name']} ({'‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if room['is_active'] else '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'})"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î:** {room['open_time']} - {room['close_time']}")
                    st.write(f"**‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á:** {room['max_duration']} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
                    st.write(f"**‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤:** {room['advance_booking_hours']} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
                
                with col2:
                    st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô:** {room['min_people']} - {room['max_people']} ‡∏Ñ‡∏ô")
                    if room['special_conditions']:
                        st.write(f"**‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©:** {room['special_conditions']}")
                
                with col3:
                    # ‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á
                    is_active = st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", 
                                           value=bool(room['is_active']), 
                                           key=f"active_{room['id']}")
                    
                    if st.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", key=f"update_room_{room['id']}"):
                        conn = sqlite3.connect('room_booking.db')
                        c = conn.cursor()
                        c.execute("UPDATE rooms SET is_active = ? WHERE id = ?", (int(is_active), room['id']))
                        conn.commit()
                        conn.close()
                        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        st.rerun()
                    
                    if st.button("‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á", key=f"delete_room_{room['id']}"):
                        conn = sqlite3.connect('room_booking.db')
                        c = conn.cursor()
                        c.execute("DELETE FROM rooms WHERE id = ?", (room['id'],))
                        c.execute("DELETE FROM bookings WHERE room_id = ?", (room['id'],))
                        conn.commit()
                        conn.close()
                        st.success("‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        st.rerun()
    
    with tab4:
        st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        conn = sqlite3.connect('room_booking.db')
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_df = pd.read_sql_query("""
            SELECT status, COUNT(*) as count 
            FROM bookings 
            GROUP BY status
        """, conn)
        
        if not status_df.empty:
            st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
            st.bar_chart(status_df.set_index('status'))
        
        # ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á
        room_booking_df = pd.read_sql_query("""
            SELECT r.name, COUNT(b.id) as booking_count 
            FROM rooms r 
            LEFT JOIN bookings b ON r.id = b.room_id 
            GROUP BY r.id, r.name
        """, conn)
        
        if not room_booking_df.empty:
            st.subheader("üè¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á")
            st.bar_chart(room_booking_df.set_index('name'))
        
        # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel
        st.subheader("üì• ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"):
                bookings_export_df = pd.read_sql_query("""
                    SELECT b.id, r.name as room_name, u.full_name as user_name, 
                           b.booking_date, b.start_time, b.end_time, b.people_count,
                           b.contact_name, b.contact_room, b.contact_phone, b.status, b.created_at
                    FROM bookings b 
                    JOIN rooms r ON b.room_id = r.id 
                    JOIN users u ON b.user_id = u.id 
                    ORDER BY b.created_at DESC
                """, conn)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    bookings_export_df.to_excel(writer, sheet_name='‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', index=False)
                
                st.download_button(
                    label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
                    data=output.getvalue(),
                    file_name=f"booking_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        with col2:
            if st.button("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
                users_export_df = pd.read_sql_query("""
                    SELECT id, username, full_name, room_number, phone, status, 
                           approval_status, created_at
                    FROM users 
                    WHERE is_admin = 0
                    ORDER BY created_at DESC
                """, conn)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    users_export_df.to_excel(writer, sheet_name='‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', index=False)
                
                st.download_button(
                    label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                    data=output.getvalue(),
                    file_name=f"users_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        conn.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
def main():
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    init_database()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session state
    if 'page' not in st.session_state:
        st.session_state.page = 'home'
    if 'user_id' not in st.session_state:
        st.session_state.user_id = None
    
    # ‡πÅ‡∏™‡∏î‡∏á Sidebar
    with st.sidebar:
        st.title("üè¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
        
        if st.session_state.user_id:
            st.success(f"‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß: {st.session_state.full_name}")
            
            if st.session_state.is_admin:
                if st.button("üîß ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"):
                    st.session_state.page = 'admin_dashboard'
                    st.rerun()
            
            if st.button("üìä Dashboard"):
                st.session_state.page = 'dashboard'
                st.rerun()
            
            if st.button("üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"):
                st.session_state.page = 'home'
                st.rerun()
            
            if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
                # ‡∏•‡πâ‡∏≤‡∏á session state
                for key in list(st.session_state.keys()):
                    if key not in ['saved_username', 'saved_password']:
                        del st.session_state[key]
                st.session_state.page = 'home'
                st.rerun()
        else:
            if st.button("üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"):
                st.session_state.page = 'home'
                st.rerun()
            
            if st.button("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
                st.session_state.page = 'login'
                st.rerun()
            
            if st.button("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
                st.session_state.page = 'register'
                st.rerun()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        st.markdown("---")
        st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö")
        
        conn = sqlite3.connect('room_booking.db')
        c = conn.cursor()
        
        c.execute("SELECT COUNT(*) FROM users WHERE is_admin = 0")
        user_count = c.fetchone()[0]
        st.metric("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", user_count)
        
        c.execute("SELECT COUNT(*) FROM rooms WHERE is_active = 1")
        room_count = c.fetchone()[0]
        st.metric("‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", room_count)
        
        c.execute("SELECT COUNT(*) FROM bookings WHERE status = 'pending'")
        pending_bookings = c.fetchone()[0]
        st.metric("‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", pending_bookings)
        
        conn.close()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if st.session_state.page == 'home':
        display_rooms()
    elif st.session_state.page == 'login':
        login_page()
    elif st.session_state.page == 'register':
        register_page()
    elif st.session_state.page == 'dashboard':
        if st.session_state.user_id:
            user_dashboard()
        else:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô")
            st.session_state.page = 'login'
            st.rerun()
    elif st.session_state.page == 'admin_dashboard':
        if st.session_state.user_id and st.session_state.is_admin:
            admin_dashboard()
        else:
            st.error("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
            st.session_state.page = 'home'
            st.rerun()
    elif st.session_state.page == 'booking_form':
        if st.session_state.user_id:
            booking_form()
        else:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô")
            st.session_state.page = 'login'
            st.rerun()

# ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤
st.markdown("""
<style>
    .main > div {
        padding-top: 2rem;
    }
    
    .stExpander > div > div > div > div {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
    }
    
    .stMetric > div {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
    }
    
    .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #c3e6cb;
    }
    
    .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #f5c6cb;
    }
    
    .warning-message {
        background-color: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #ffeaa7;
    }
</style>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
